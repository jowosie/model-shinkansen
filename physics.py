# ==============================
# Shinkansen Physics Engine v1.0
# ==============================

import math
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from config import LO_VEHICLE, SCMAGLEV_SYSTEM, CONSTANTS

# ==== Vehicle Dynamics Model ====

# 1. Force Models
# Calculates levitation and guidance forces for the EDS system
# calculated for four corner points

def calculate_maglev_forces(state):
    z,y,psi,theta,phi = state[0:5]

    # Define locations of units relative to center of mass
    locations = [
        (length / 2, width / 2),    # front right
        (length / 2, -width / 2),   # front left
        (-length / 2, width / 2),   # rear right
        (-length / 2, -width / 2),  # rear left
    ]

    # EDS Parameters (Placeholder Values)
    k_z = 8e5 # vertical stiffness
    c_z = 5e4 # vertical damping
    k_y = 6e5 # lateral stiffness
    c_y = 4e4 # lateral damping

    total_force_z = 0
    total_force_y = 0
    total_torque_psi = 0
    total_torque_theta = 0
    total_torque_phi = 0

    for x_loc, y_loc in locations:
        # Calculate vertical and lateral displacement at this SCM's location
        z_gap = z + theta * x_loc - phi * y_loc
        y_gap = y - psi * x_loc

        # Simple spring-damper model for EDS forces
        # Force = -k*x - c*v (here, v is dz/dt or dy/dt from the state vector)
        force_z = -k_z * z_gap - c_z * state[5]
        force_y = -k_y * y_gap - c_y * state[6]

        total_force_z += force_z
        total_force_y += force_y

        # Calculate torques generated by these forces
        total_torque_psi += -force_y * x_loc
        total_torque_theta += force_z * x_loc
        total_torque_phi += -force_z * y_loc

    return np.array([total_force_z, total_force_y, total_torque_psi, total_torque_theta, total_torque_phi])